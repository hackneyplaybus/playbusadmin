import { OnInit, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { ListItem } from './multiselect.model';
export interface DropdownSettings {
    singleSelection: Boolean;
    idField?: string;
    textField?: string;
    enableCheckAll: Boolean;
    selectAllText: String;
    unSelectAllText: String;
    allowSearchFilter?: Boolean;
    maxHeight?: Number;
    itemsShowLimit: Number;
    limitSelection?: Number;
    searchPlaceholderText?: String;
    closeDropDownOnSelection?: Boolean;
}
export declare const DROPDOWN_CONTROL_VALUE_ACCESSOR: any;
export declare class MultiSelectComponent implements OnInit, ControlValueAccessor {
    _settings: DropdownSettings;
    _data: Array<ListItem>;
    selectedItems: Array<ListItem>;
    isDropdownOpen: boolean;
    filter: ListItem;
    defaultSettings: DropdownSettings;
    placeholder: string;
    disabled: boolean;
    settings: DropdownSettings;
    data: Array<any>;
    onSelect: EventEmitter<ListItem>;
    onDeSelect: EventEmitter<ListItem>;
    onSelectAll: EventEmitter<Array<ListItem>>;
    onDeSelectAll: EventEmitter<Array<ListItem>>;
    private onTouchedCallback;
    private onChangeCallback;
    constructor();
    ngOnInit(): void;
    onItemClick($event: any, item: ListItem): boolean;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    onTouched(): void;
    trackByFn(index: any, item: any): any;
    isSelected(clickedItem: ListItem): boolean;
    isLimitSelectionReached(): boolean;
    isAllItemsSelected(): boolean;
    itemShowRemaining(): Number;
    addSelected(item: ListItem): void;
    removeSelected(itemSel: ListItem): void;
    emittedValue(val: any): any;
    objectify(val: ListItem): {};
    toggleDropdown(evt: any): void;
    closeDropdown(): void;
    toggleSelectAll(): boolean;
}
